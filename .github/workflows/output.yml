# This is a basic workflow to help you get started with Actions

name: Test output

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      # Runs a single command using the runners shell
      - name: Run a one-line script
        id: testing
        run: echo Hello, world!

      - name: Sync folder to S3
        id: s3_sync1
        uses: haukurh/aws-s3-sync-action@v0.0.14
        with:
          directory: test1/
          s3-bucket: ${{ secrets.AWS_S3_BUCKET }}
          s3-path: /test1/

      - name: Sync folder2 to S3
        id: s3_sync2
        uses: haukurh/aws-s3-sync-action@v0.0.14
        with:
          directory: test2
          s3-bucket: ${{ secrets.AWS_S3_BUCKET }}
          s3-path: /test2/

      - name: Work with output
        id: cloudfront
        uses: haukurh/aws-cloudfront-invalidation-action@v0.0.1
        with:
          sync-output: "${{ steps.s3_sync1.outputs.stdout }}${{ steps.s3_sync2.outputs.stdout }}"
          s3-bucket: ${{ secrets.AWS_S3_BUCKET }}

      - name: test output
        if: steps.cloudfront.outputs.quantity != 0
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DIST }} --invalidation-batch ${{ steps.cloudfront.outputs.json }}
